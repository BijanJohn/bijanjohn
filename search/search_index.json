{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Poetry | Artistry | Mastery Merry Christmas 2023 Love is all that is real Love is all that is real it shows up in greetings cards and text messages hugs, smiles and gathering with delicious food when asking how to improve use more love, it is what is true feeds our soul and heart the expressions in words, actions and art part with the ideas of representation to see the nothing underneath the sensations of Love complete, Love Supreme it is always here, now we are allowed this sublime infinite expanse this Love is an ecstatic dance it is what made the Sufi's whirl in trance history shows our poets with the same message embedded in different methods poured in different drinks Love changes how we think it grows our capacity to heal Love knows no expectations needs no confirmation Love is what we feel it is a miracle that Love is all that is real Christmas Day Birthday wishes granted, Christmas packaging unwrapped with poetry tape handling how we keep this love on tap make shift, make the shift into making new shifts with position the first lesson is always make moments to listen in between the stimulus and response there is this decision wholehearted Love and Soul living with your friends, family, mentors and children the way it happens by itself like intuition you don't have to push hard to see how things fall in places, people and things tall order of our best times together wishing to savor, the interconnectedness is never severed the energy and emptiness goes on forever it's all you've ever seen, and it is enough sometimes holidays are the tough stuff where ever you are at, it's the perfect time and place, to be looking up with grace and gratitude we offer blessings and tip our cup About me Bijan is a local poet from Austin Texas who for years was an Artist of writing code and maintaining highly available systems. He has retired from corporate America engineering and is spending his time bringing Austin Poetry back to life. He studies under the tutelage of the greatest living American Poet, Thom the World Poet , who is known to drop improvised verse at open mics of the city and has a compulsion to write and share poetry from the depths of love. When Bijan is not performing he is typically reading books, listening to vinyl records, crafting his artistry through different forms of expression and learning how to make a small business grow. Bijan has been influenced greatly by the lyricists of Hip Hop who were concerned with Mastery, with the timeless art of freestyle (making things up on the spot) and open mic culture. He manages the site austinopenmicpoetry.com . You can reach him via email at bijan@bijanrahnamai.com Instagram - https://www.instagram.com/baustinpoetry/ YouTube - https://www.youtube.com/@baustinpoetry","title":"Home"},{"location":"#poetry-artistry-mastery","text":"","title":"Poetry | Artistry | Mastery"},{"location":"#merry-christmas-2023","text":"","title":"Merry Christmas 2023"},{"location":"#love-is-all-that-is-real","text":"Love is all that is real it shows up in greetings cards and text messages hugs, smiles and gathering with delicious food when asking how to improve use more love, it is what is true feeds our soul and heart the expressions in words, actions and art part with the ideas of representation to see the nothing underneath the sensations of Love complete, Love Supreme it is always here, now we are allowed this sublime infinite expanse this Love is an ecstatic dance it is what made the Sufi's whirl in trance history shows our poets with the same message embedded in different methods poured in different drinks Love changes how we think it grows our capacity to heal Love knows no expectations needs no confirmation Love is what we feel it is a miracle that Love is all that is real","title":"Love is all that is real"},{"location":"#christmas-day","text":"Birthday wishes granted, Christmas packaging unwrapped with poetry tape handling how we keep this love on tap make shift, make the shift into making new shifts with position the first lesson is always make moments to listen in between the stimulus and response there is this decision wholehearted Love and Soul living with your friends, family, mentors and children the way it happens by itself like intuition you don't have to push hard to see how things fall in places, people and things tall order of our best times together wishing to savor, the interconnectedness is never severed the energy and emptiness goes on forever it's all you've ever seen, and it is enough sometimes holidays are the tough stuff where ever you are at, it's the perfect time and place, to be looking up with grace and gratitude we offer blessings and tip our cup","title":"Christmas Day"},{"location":"#about-me","text":"Bijan is a local poet from Austin Texas who for years was an Artist of writing code and maintaining highly available systems. He has retired from corporate America engineering and is spending his time bringing Austin Poetry back to life. He studies under the tutelage of the greatest living American Poet, Thom the World Poet , who is known to drop improvised verse at open mics of the city and has a compulsion to write and share poetry from the depths of love. When Bijan is not performing he is typically reading books, listening to vinyl records, crafting his artistry through different forms of expression and learning how to make a small business grow. Bijan has been influenced greatly by the lyricists of Hip Hop who were concerned with Mastery, with the timeless art of freestyle (making things up on the spot) and open mic culture. He manages the site austinopenmicpoetry.com . You can reach him via email at bijan@bijanrahnamai.com Instagram - https://www.instagram.com/baustinpoetry/ YouTube - https://www.youtube.com/@baustinpoetry","title":"About me"},{"location":"art/recorded_music/","text":"","title":"Recorded music"},{"location":"art/shows/","text":"My First Show - Debut I had my first show on Friday, August 11th 2023. It was incredible, had my turntables/wax and dropped my favorite Hip Hop tracks and some of my own raps/freestyles/poetry. The 50th Anniversary of Hip Hop was such a great experience in Austin.","title":"Shows"},{"location":"art/shows/#my-first-show-debut","text":"I had my first show on Friday, August 11th 2023. It was incredible, had my turntables/wax and dropped my favorite Hip Hop tracks and some of my own raps/freestyles/poetry. The 50th Anniversary of Hip Hop was such a great experience in Austin.","title":"My First Show - Debut"},{"location":"blog/2022-07-15-National-Parks/","text":"America the Beautiful In 2019 I took a trip to Utah to see the Mighty Five, 5 amazing National Parks in Utah and it opened my eyes to see more of the most beautiful places in America. I couldn't believe how incredible these public lands are in our backyard. The National Parks are now some of my favorite trips and places to visit, they recharge my soul and inspire me see the history and wonder of our most sacred grounds. This is where I hope to add pictures, stories, suggestions on trails and experiences from the past that could help someone else see this beauty. This past summer in 2022 I visited Montana for the first time and fell in love with the city of Missoula, The mountains of Glacier and Flat Head Lake. More to come from the Trip to Missoula. Utah Arches National Park Canyonlands National Park Bryce National Park Capitol Reef National Park Zion National Park Texas Big Bend National Park Guadalupe National Park New Mexico Carlsbad Caverns Colorado Red Rocks Montana Glacier National Park Hawaii Haliakula National Park","title":"America the Beautiful"},{"location":"blog/2022-07-15-National-Parks/#america-the-beautiful","text":"In 2019 I took a trip to Utah to see the Mighty Five, 5 amazing National Parks in Utah and it opened my eyes to see more of the most beautiful places in America. I couldn't believe how incredible these public lands are in our backyard. The National Parks are now some of my favorite trips and places to visit, they recharge my soul and inspire me see the history and wonder of our most sacred grounds. This is where I hope to add pictures, stories, suggestions on trails and experiences from the past that could help someone else see this beauty. This past summer in 2022 I visited Montana for the first time and fell in love with the city of Missoula, The mountains of Glacier and Flat Head Lake. More to come from the Trip to Missoula.","title":"America the Beautiful"},{"location":"blog/2022-07-15-National-Parks/#utah","text":"","title":"Utah"},{"location":"blog/2022-07-15-National-Parks/#arches-national-park","text":"","title":"Arches National Park"},{"location":"blog/2022-07-15-National-Parks/#canyonlands-national-park","text":"","title":"Canyonlands National Park"},{"location":"blog/2022-07-15-National-Parks/#bryce-national-park","text":"","title":"Bryce National Park"},{"location":"blog/2022-07-15-National-Parks/#capitol-reef-national-park","text":"","title":"Capitol Reef National Park"},{"location":"blog/2022-07-15-National-Parks/#zion-national-park","text":"","title":"Zion National Park"},{"location":"blog/2022-07-15-National-Parks/#texas","text":"","title":"Texas"},{"location":"blog/2022-07-15-National-Parks/#big-bend-national-park","text":"","title":"Big Bend National Park"},{"location":"blog/2022-07-15-National-Parks/#guadalupe-national-park","text":"","title":"Guadalupe National Park"},{"location":"blog/2022-07-15-National-Parks/#new-mexico","text":"","title":"New Mexico"},{"location":"blog/2022-07-15-National-Parks/#carlsbad-caverns","text":"","title":"Carlsbad Caverns"},{"location":"blog/2022-07-15-National-Parks/#colorado","text":"","title":"Colorado"},{"location":"blog/2022-07-15-National-Parks/#red-rocks","text":"","title":"Red Rocks"},{"location":"blog/2022-07-15-National-Parks/#montana","text":"","title":"Montana"},{"location":"blog/2022-07-15-National-Parks/#glacier-national-park","text":"","title":"Glacier National Park"},{"location":"blog/2022-07-15-National-Parks/#hawaii","text":"","title":"Hawaii"},{"location":"blog/2022-07-15-National-Parks/#haliakula-national-park","text":"","title":"Haliakula National Park"},{"location":"books/book-reviews/","text":"Stay tuned, more coming soon. :)","title":"Book Reviews"},{"location":"cool_experiences/skydiving/","text":"Jumping out of planes might seem insane the feelings of fear change and re-arrange perspective is my favorite part of the brain teaching ourselves to be even more highly trained My excitement is one of my favorite qualities Equanimity, Stoicism and a capricious wisdom Engineering paths to freedom and graphs of the larger lump sum my favorite ones are most simple in principle It took time to learn to stand tall even more time to embrace the fall visualizing the drop while taking cold showers a lot now cold showers are how I cool off in the Texas hot Went for a run to Barton Springs saw James on his 60th with family relaxing in a few hours jumped out the flying bus With Love you have to trust There will always be a way give more than you take away for it is the way","title":"Skydiving"},{"location":"engineering/certifications/","text":"Certifications Credly certification profile AWS Certified DevOps Professional This is my latest certification and likely my most difficult one that I have achieved, and potentially the most valuable. The DevOps Professional cert took me 2 attempts, 2 months apart. If you are a DevOps engineer and using AWS, this is the certification for you. It provides real world examples of what a DevOps Engineer would need to do to be effective. Jamf Certified Tech (Jamf 200) Course I recently took a course to better understand how my company uses Jamf as the MDM (Mobile Device Management) software for updating the tvOS devices we use at Atmosphere. It was a good course and the exam was part multiple choice and part hands on. I would recommend this for people in Corporate IT who may have to manage Macbooks for the company or if someone has a unique case like we do, pushing updates to Ipads, iOS devices or tvOS. AWS Certified Solutions Architect Associate I received this certification in March 2022. The Solutions Architect cert wasn't too challenging, but it was enlightening to see how expansive the AWS catalogue is as well as how sophisticated they build their products. Hashi Consul Associate In 2021, I got the Consul Certification and completed the 3 associate level certs that Hashi offered at the time. My company uses Consul heavily for Service Discovery (and DNS) and it is a crucial piece to how we evaluate service health in our distributed clusters. I can't recommend this technology enough as it is incredibly powerful and able to help manage the complicated pieces of having a service catalog. Hashi Vault Associate When you run distributed systems you are going to need a secure and reliable secrets store and that is what Vault provides. At the end of 2020 I got my Vault Certification and was enlightened as to how flexible and robust the Vault tool is. There are many secrets engines with Vault for many use cases, after taking this cert you definitely learn and understand how it can be used. Hashi Terraform Associate Hashicorp makes incredible products and my company uses their tools heavily. In 2020 I decided to get my Terraform Certification . IaC (Infrastructure as Code) is one of the most important principles of Dev Ops that I have learned and practiced. Using technology like this allows for immutable infrastructure, configuration as code, environments without config drift and automation at scale. RHCSAA I got my Ansible certification towards the end of 2019 for Ansible version 2.7. This was definitely the most difficult (and fun!) certification I have ever had the pleasure of working on, also took me a few times to pass. It exposed me to a DSL (domain specific language) that gave me the skills to write automation and reduce toil. I used Ansible for the next few years to apply fixes at mass scale on servers to improve availability and quality in the hosting org of my company at the time. After obtaining this cert I went to Atlanta for Ansiblefest, which was my first tech conference and learned so much. AWS Cloud Practitioner This was my first cloud certification in 2019, and it was a good intro into the Cloud Computing model, why it is important and a general survey of AWS services. RHCSA I got my RHCSA back in 2019 for the Red Hat Enterprise Linux 7 exam. This was one of the most challenging and fun certifications I have ever attempted, took me a few times to pass. It is a hands-on exam that really expects an administrator to have hands on keyboard skills to perform needed maintenance and troubleshooting of Centos. It was in this certification that I fell in love with Linux and have only been happier since.","title":"Certifications"},{"location":"engineering/certifications/#certifications","text":"Credly certification profile","title":"Certifications"},{"location":"engineering/certifications/#aws-certified-devops-professional","text":"This is my latest certification and likely my most difficult one that I have achieved, and potentially the most valuable. The DevOps Professional cert took me 2 attempts, 2 months apart. If you are a DevOps engineer and using AWS, this is the certification for you. It provides real world examples of what a DevOps Engineer would need to do to be effective.","title":"AWS Certified DevOps Professional"},{"location":"engineering/certifications/#jamf-certified-tech-jamf-200-course","text":"I recently took a course to better understand how my company uses Jamf as the MDM (Mobile Device Management) software for updating the tvOS devices we use at Atmosphere. It was a good course and the exam was part multiple choice and part hands on. I would recommend this for people in Corporate IT who may have to manage Macbooks for the company or if someone has a unique case like we do, pushing updates to Ipads, iOS devices or tvOS.","title":"Jamf Certified Tech (Jamf 200) Course"},{"location":"engineering/certifications/#aws-certified-solutions-architect-associate","text":"I received this certification in March 2022. The Solutions Architect cert wasn't too challenging, but it was enlightening to see how expansive the AWS catalogue is as well as how sophisticated they build their products.","title":"AWS Certified Solutions Architect Associate"},{"location":"engineering/certifications/#hashi-consul-associate","text":"In 2021, I got the Consul Certification and completed the 3 associate level certs that Hashi offered at the time. My company uses Consul heavily for Service Discovery (and DNS) and it is a crucial piece to how we evaluate service health in our distributed clusters. I can't recommend this technology enough as it is incredibly powerful and able to help manage the complicated pieces of having a service catalog.","title":"Hashi Consul Associate"},{"location":"engineering/certifications/#hashi-vault-associate","text":"When you run distributed systems you are going to need a secure and reliable secrets store and that is what Vault provides. At the end of 2020 I got my Vault Certification and was enlightened as to how flexible and robust the Vault tool is. There are many secrets engines with Vault for many use cases, after taking this cert you definitely learn and understand how it can be used.","title":"Hashi Vault Associate"},{"location":"engineering/certifications/#hashi-terraform-associate","text":"Hashicorp makes incredible products and my company uses their tools heavily. In 2020 I decided to get my Terraform Certification . IaC (Infrastructure as Code) is one of the most important principles of Dev Ops that I have learned and practiced. Using technology like this allows for immutable infrastructure, configuration as code, environments without config drift and automation at scale.","title":"Hashi Terraform Associate"},{"location":"engineering/certifications/#rhcsaa","text":"I got my Ansible certification towards the end of 2019 for Ansible version 2.7. This was definitely the most difficult (and fun!) certification I have ever had the pleasure of working on, also took me a few times to pass. It exposed me to a DSL (domain specific language) that gave me the skills to write automation and reduce toil. I used Ansible for the next few years to apply fixes at mass scale on servers to improve availability and quality in the hosting org of my company at the time. After obtaining this cert I went to Atlanta for Ansiblefest, which was my first tech conference and learned so much.","title":"RHCSAA"},{"location":"engineering/certifications/#aws-cloud-practitioner","text":"This was my first cloud certification in 2019, and it was a good intro into the Cloud Computing model, why it is important and a general survey of AWS services.","title":"AWS Cloud Practitioner"},{"location":"engineering/certifications/#rhcsa","text":"I got my RHCSA back in 2019 for the Red Hat Enterprise Linux 7 exam. This was one of the most challenging and fun certifications I have ever attempted, took me a few times to pass. It is a hands-on exam that really expects an administrator to have hands on keyboard skills to perform needed maintenance and troubleshooting of Centos. It was in this certification that I fell in love with Linux and have only been happier since.","title":"RHCSA"},{"location":"engineering/learning_from_failures/","text":"Failure is just a stepping stone to success At the end of last year, 2022, I took the AWS Certified DevOps Engineer - Professional Exam and failed it on my first attempt, obtaining a 699 out of 1000 where 750 would have been passing. When I shared it with a few of my Developer friends I was reminded that \"Failure is just a stepping stone to success\". I feel fortunate to have this belief in my belief system after working in Engineering for several years, I also feel fortunate for the friend who reminded me of this (you know who you are ;). I recently passed that exam at the beginning of February 2023, and I feel it is worth reflecting on a bit, so I am writing this post in hopes to remind my future self that \"failure\" is just part of the process; bonus points for if I inspire anyone else to attempt something difficult. How do I learn Engineering and new Technologies? I am a self-taught technologist who started working as a Level 1 support rep nearly 10 years ago in 2013, who now for the last several years has been in responsible for production systems. I have taken a few course at my local Community College but ultimately the majority of my learning has taken place on the job or in self learning outside of work. The most value tool/skill I have encountered for learning new technologies is to spend 1 hour a day (ideally at your ideal learning environment, for me that is in the morning) learning something new. The progressive skill of learning requires time and patience and space to manifest and most importantly consistency (and resilience to keep up that consistency). If you only spend a few hours a few times, you will not realize the gains of getting deep into a subject compared to someone who comes back each day for training. A few more tips It is ok to fail, try not to wait 6 months to a year before your next attempt. You will be not be starting over completely so take the next attempt a month or two later. Try adding a few new materials to help you study. Using note cards, picking up a new practice test on Udemy and going over my notes helped me on my 2nd attempt. Share your learning experience with others. Learning shouldn't have to be a solo event, if you can, pair up with a friend or build accountability with others so that you stay consistent and growing. Below are a few Online Learning sites that have been helpful in my journey to obtain more certifications as well as skills as an engineer and developer. A Cloud Guru If you want to learn Cloud Technologies, I couldn't recommend this site enough. I used to be a member of Linux Academy before it was bought and mergd into A Cloud Guru (Parent Company Pluralsight) and this site has what you are looking for. They have sandbox cloud accounts for all the major cloud technologies so that you can have real world hands-on experience to play with infrastructure. They also have courses designed to help you pass most certifications with practice tests and quiz's and hands on labs. This was what I used most to help me pass the AWS DevOps Professional Certification . Real Python If you are not a developer and are interested in learning a programming language, I couldn't recommend Python enough as a good language to start on. Real Python is accessible to people on all levels and I frequently find their content extraordinary and very digestible. They even have a great podcast that talks about different articles and new things in the Python world. I am no longer doing daily Python development work, but I keep my membership to this account as I love the stuff they come out with and using them as a reference when I have a challenging Python problem is so helpful. O'Reilly My last company had a subscription to the O'Reilly Catalog of Books and Courses and what a treasure that was for my learning. I used their content to help me learn Linux and passed my RHCSA (Red Hat Certified Systems Administrator). I started teaching myself GO and a few other things from this site and I can't recommend it enough. If you are an Engineer or Dev, chances are you have either purchased/borrowed or seen one of the O'Reilly books with a creature or animal on the front cover as they cover almost any technology you can think of. Most of my favorite books are hosted on their site that you can read with a subscription; The Phoenix Project, Site Reliability Engineering, Software Engineering at Google to name a few. Udemy Udemy has a ton of great courses, in particular if you are studying for a multiple choice exam they likely have affordable practice tests for an exam you may be working on. There are also hands-on courses that you can follow along with experts who have written the textbook. A few of my favorites so far have been learning Kubernetes with KodeKloud with Mumsahd Mannambeth and Automating the boring stuff with Al Sweigart. Whether studying for a certification or learning a new skill or building a new tool/project Udemy has lots to offer. Laracasts This is the newest site I have started using for learning, specifically to learn PHP, Laravel and Vue. I am a PHP, JavaScript and TypeScript novice and those are programming languages used heavily at my new job, so I figured it was time to get more into these technologies. I am still new to the platform but so far in the first course I have taken I am loving it. To me, being a newcomer or a novice is exciting as I know that in learning something new I am going to make way more progress than going deeper into a subject I am more familiar with. The greatest gains are to be had by someone who hasn't ever even started a new type of training. This beginners mindset can be intimating, but maintaining a curiosity in learning and being ok with being wrong has been helpful in me overcoming the uncomfortable feeling of \"not getting things right\". This was my first post of this sort, so let me know if this resonates with you at all and I may create some follow-ups on the subject and learning.","title":"Learning From Failures"},{"location":"engineering/learning_from_failures/#failure-is-just-a-stepping-stone-to-success","text":"At the end of last year, 2022, I took the AWS Certified DevOps Engineer - Professional Exam and failed it on my first attempt, obtaining a 699 out of 1000 where 750 would have been passing. When I shared it with a few of my Developer friends I was reminded that \"Failure is just a stepping stone to success\". I feel fortunate to have this belief in my belief system after working in Engineering for several years, I also feel fortunate for the friend who reminded me of this (you know who you are ;). I recently passed that exam at the beginning of February 2023, and I feel it is worth reflecting on a bit, so I am writing this post in hopes to remind my future self that \"failure\" is just part of the process; bonus points for if I inspire anyone else to attempt something difficult.","title":"Failure is just a stepping stone to success"},{"location":"engineering/learning_from_failures/#how-do-i-learn-engineering-and-new-technologies","text":"I am a self-taught technologist who started working as a Level 1 support rep nearly 10 years ago in 2013, who now for the last several years has been in responsible for production systems. I have taken a few course at my local Community College but ultimately the majority of my learning has taken place on the job or in self learning outside of work. The most value tool/skill I have encountered for learning new technologies is to spend 1 hour a day (ideally at your ideal learning environment, for me that is in the morning) learning something new. The progressive skill of learning requires time and patience and space to manifest and most importantly consistency (and resilience to keep up that consistency). If you only spend a few hours a few times, you will not realize the gains of getting deep into a subject compared to someone who comes back each day for training.","title":"How do I learn Engineering and new Technologies?"},{"location":"engineering/learning_from_failures/#a-few-more-tips","text":"It is ok to fail, try not to wait 6 months to a year before your next attempt. You will be not be starting over completely so take the next attempt a month or two later. Try adding a few new materials to help you study. Using note cards, picking up a new practice test on Udemy and going over my notes helped me on my 2nd attempt. Share your learning experience with others. Learning shouldn't have to be a solo event, if you can, pair up with a friend or build accountability with others so that you stay consistent and growing. Below are a few Online Learning sites that have been helpful in my journey to obtain more certifications as well as skills as an engineer and developer.","title":"A few more tips"},{"location":"engineering/learning_from_failures/#a-cloud-guru","text":"If you want to learn Cloud Technologies, I couldn't recommend this site enough. I used to be a member of Linux Academy before it was bought and mergd into A Cloud Guru (Parent Company Pluralsight) and this site has what you are looking for. They have sandbox cloud accounts for all the major cloud technologies so that you can have real world hands-on experience to play with infrastructure. They also have courses designed to help you pass most certifications with practice tests and quiz's and hands on labs. This was what I used most to help me pass the AWS DevOps Professional Certification .","title":"A Cloud Guru"},{"location":"engineering/learning_from_failures/#real-python","text":"If you are not a developer and are interested in learning a programming language, I couldn't recommend Python enough as a good language to start on. Real Python is accessible to people on all levels and I frequently find their content extraordinary and very digestible. They even have a great podcast that talks about different articles and new things in the Python world. I am no longer doing daily Python development work, but I keep my membership to this account as I love the stuff they come out with and using them as a reference when I have a challenging Python problem is so helpful.","title":"Real Python"},{"location":"engineering/learning_from_failures/#oreilly","text":"My last company had a subscription to the O'Reilly Catalog of Books and Courses and what a treasure that was for my learning. I used their content to help me learn Linux and passed my RHCSA (Red Hat Certified Systems Administrator). I started teaching myself GO and a few other things from this site and I can't recommend it enough. If you are an Engineer or Dev, chances are you have either purchased/borrowed or seen one of the O'Reilly books with a creature or animal on the front cover as they cover almost any technology you can think of. Most of my favorite books are hosted on their site that you can read with a subscription; The Phoenix Project, Site Reliability Engineering, Software Engineering at Google to name a few.","title":"O'Reilly"},{"location":"engineering/learning_from_failures/#udemy","text":"Udemy has a ton of great courses, in particular if you are studying for a multiple choice exam they likely have affordable practice tests for an exam you may be working on. There are also hands-on courses that you can follow along with experts who have written the textbook. A few of my favorites so far have been learning Kubernetes with KodeKloud with Mumsahd Mannambeth and Automating the boring stuff with Al Sweigart. Whether studying for a certification or learning a new skill or building a new tool/project Udemy has lots to offer.","title":"Udemy"},{"location":"engineering/learning_from_failures/#laracasts","text":"This is the newest site I have started using for learning, specifically to learn PHP, Laravel and Vue. I am a PHP, JavaScript and TypeScript novice and those are programming languages used heavily at my new job, so I figured it was time to get more into these technologies. I am still new to the platform but so far in the first course I have taken I am loving it. To me, being a newcomer or a novice is exciting as I know that in learning something new I am going to make way more progress than going deeper into a subject I am more familiar with. The greatest gains are to be had by someone who hasn't ever even started a new type of training. This beginners mindset can be intimating, but maintaining a curiosity in learning and being ok with being wrong has been helpful in me overcoming the uncomfortable feeling of \"not getting things right\". This was my first post of this sort, so let me know if this resonates with you at all and I may create some follow-ups on the subject and learning.","title":"Laracasts"},{"location":"engineering/software_delivery/","text":"The thing that excites me most in my work is figuring out how to build and maintain better systems to delivery software updates. Below is a Quote from the DevOps Handbook from a Case Study Highlighting the importance of understanding the changes that we make. In 2004, Gene Kim, Kevin Behr and George Spafford note that high-performing organizations recognize that 80% of all outages are caused by change and 80% of MTTR is spent trying to determine what changed. 1. Automation at Scale Automation at Scale means when we know a fix is available, we are primarily focused on delivering that fix to All Customers and Environments. Applying a specific minor update to an individual customer in an Adhoc way is also valuable, and there is a place for transformational Self Service however the Ultimate focus for every organization is Automation at Scale. Embracing Automation means that we will seek to eliminate as much Toil (manual work that is repeatable) to focus energy more closely on automation. 2. Standardization across Applications Standardization whether in the form of Naming Conventions, configuration, workflows, technologies or frameworks is important. Requiring standards like only allowing certain naming conventions in Production services or even lower environments means you won't have automation break and there won't be special snowflakes to handle manually via toil. Without consolidation of frameworks you end up supporting 3 different types of drivers, OS's, or frameworks. Applying a very rigid standard across all elements of customers allows anomaly detection and the ability to understand immediately if a service belongs or not. Most companies pay for services to be running because they don't know if they can turn it off or if they know they can turn it off they just don't know how to because of technical debt. Standardization across Applications allows for Automation at Scale. 3. Continuous Feedback Loop In the DevOps Handbook The Second Way describes the principles of creating fast and continuous feedback loops from Operations to Development. By doing this, we shorten and amplify feedback loops so that we can see problems as they occur and radiate this information to everyone in the value stream. This allows us to quickly find and fix problems earlier in the software development life cycle, ideally long before they cause a catastrophic failure. 4. Error Budgets Not all services are equally performant, some have a much older code base which is more large and complicated while others might be more green field and have fewer dependencies. Services should be evaluated based on the number of issues that occur throughout the lifecycle of their release, customer impact (outages/degradation of service) is one of the most valuable measures to determining impact. By better understanding the risk and challenges with each service delivered (and by breaking down Monolithic apps into Microservices) we can provide better Gating as to which services will be released and which ones will require more work. Error budgets are also a great way determine if Engineering should have a clear runway for new features or if code quality requires more robust testing. 5. Test in a Lower Environment First This one almost seems too obvious to be in the list, however one might be surprised how many Production services get deployed and run for customers without a lower environment first. Always include lower environment testing and deployment prior to delivering (or even troubleshooting) in Production first. 6. Errors should be captured and improved Every error is important. Often in software engineering a benign error will go overlooked and continuously be logged or returning a non 200 HTTP response. Even if the error is \"Known\" or could be classified as non-impactful (red herring in troubleshooting), that error still takes up space in the minds of engineers, in the logs/metrics/traces and ultimately makes an application less observable. 7. Break up deployments to enable faster delivery By breaking up deployments into small batches to deliver updates more quickly and regularly we can reduce risk of big issues showing up across multitudes of customers, correcting issues as they are found in the wild. Feature Flags are a valuable way to deliver more modular updates of components in which we can deliver deliberate updates of increasing surface area to customers as we gain confidence in the updates before the entirety is delivered. 8. Data Driven Decision-making Embracing telemetry to build Observability into our updates help us understand the changes we are introducing into Production. We can test the code that is being cut by Development pre and post update for Quality and provide that data upstream. We can also test our deployment pipeline to determine if any environmental issues or deployment issues happen pre and post update on the side of Operations. 9. Decommission apps, environments and frameworks Letting applications, frameworks and environments run when they are not needed is incredibly expensive. It is much easier to deploy new services than to know when and how we can turn off old services, or to understand if they are still needed. By creating a central software delivery and deployment mechanism we can more assuredly understand what applications may be running but could be flagged for decommisioning. 10. Continuous Delivery to Continuous Deployment Making use of all the tools and experiences to mitigate risk, monitor quality and improve software delivery speed we eventually get to the place of Continuous Deployment. Continuous Deployment is where each change committed to version control is integrated, tested and deployed into production. Jez Humble defines Continuous Deployment as the following. When all developers are working in small batches on trunk, or everyone is working off trunk in short-lived feature branches that get merged to trunk regularly, and when trunk is always kept in a releasable state, and when we can release on demand at the push of a button during normal business hours, we are doing continuous delivery. Developers get fast feedback when they introduce any regression errors, which include defects, performance issues, security issues, usability issues, etc. When these issues are found, they are fixed immediately so that trunk is always deployable. In addition to the above, when we are deploying good builds into production on a regular basis through self-service (being deployed by Dev or by Ops)\u2014which typically means that we are deploying to production at least once per day per developer, or perhaps even automatically deploying every change a developer commits\u2014this is when we are engaging in continuous deployment.","title":"Software Delivery"},{"location":"engineering/software_delivery/#1-automation-at-scale","text":"Automation at Scale means when we know a fix is available, we are primarily focused on delivering that fix to All Customers and Environments. Applying a specific minor update to an individual customer in an Adhoc way is also valuable, and there is a place for transformational Self Service however the Ultimate focus for every organization is Automation at Scale. Embracing Automation means that we will seek to eliminate as much Toil (manual work that is repeatable) to focus energy more closely on automation.","title":"1. Automation at Scale"},{"location":"engineering/software_delivery/#2-standardization-across-applications","text":"Standardization whether in the form of Naming Conventions, configuration, workflows, technologies or frameworks is important. Requiring standards like only allowing certain naming conventions in Production services or even lower environments means you won't have automation break and there won't be special snowflakes to handle manually via toil. Without consolidation of frameworks you end up supporting 3 different types of drivers, OS's, or frameworks. Applying a very rigid standard across all elements of customers allows anomaly detection and the ability to understand immediately if a service belongs or not. Most companies pay for services to be running because they don't know if they can turn it off or if they know they can turn it off they just don't know how to because of technical debt. Standardization across Applications allows for Automation at Scale.","title":"2. Standardization across Applications"},{"location":"engineering/software_delivery/#3-continuous-feedback-loop","text":"In the DevOps Handbook The Second Way describes the principles of creating fast and continuous feedback loops from Operations to Development. By doing this, we shorten and amplify feedback loops so that we can see problems as they occur and radiate this information to everyone in the value stream. This allows us to quickly find and fix problems earlier in the software development life cycle, ideally long before they cause a catastrophic failure.","title":"3. Continuous Feedback Loop"},{"location":"engineering/software_delivery/#4-error-budgets","text":"Not all services are equally performant, some have a much older code base which is more large and complicated while others might be more green field and have fewer dependencies. Services should be evaluated based on the number of issues that occur throughout the lifecycle of their release, customer impact (outages/degradation of service) is one of the most valuable measures to determining impact. By better understanding the risk and challenges with each service delivered (and by breaking down Monolithic apps into Microservices) we can provide better Gating as to which services will be released and which ones will require more work. Error budgets are also a great way determine if Engineering should have a clear runway for new features or if code quality requires more robust testing.","title":"4. Error Budgets"},{"location":"engineering/software_delivery/#5-test-in-a-lower-environment-first","text":"This one almost seems too obvious to be in the list, however one might be surprised how many Production services get deployed and run for customers without a lower environment first. Always include lower environment testing and deployment prior to delivering (or even troubleshooting) in Production first.","title":"5. Test in a Lower Environment First"},{"location":"engineering/software_delivery/#6-errors-should-be-captured-and-improved","text":"Every error is important. Often in software engineering a benign error will go overlooked and continuously be logged or returning a non 200 HTTP response. Even if the error is \"Known\" or could be classified as non-impactful (red herring in troubleshooting), that error still takes up space in the minds of engineers, in the logs/metrics/traces and ultimately makes an application less observable.","title":"6. Errors should be captured and improved"},{"location":"engineering/software_delivery/#7-break-up-deployments-to-enable-faster-delivery","text":"By breaking up deployments into small batches to deliver updates more quickly and regularly we can reduce risk of big issues showing up across multitudes of customers, correcting issues as they are found in the wild. Feature Flags are a valuable way to deliver more modular updates of components in which we can deliver deliberate updates of increasing surface area to customers as we gain confidence in the updates before the entirety is delivered.","title":"7. Break up deployments to enable faster delivery"},{"location":"engineering/software_delivery/#8-data-driven-decision-making","text":"Embracing telemetry to build Observability into our updates help us understand the changes we are introducing into Production. We can test the code that is being cut by Development pre and post update for Quality and provide that data upstream. We can also test our deployment pipeline to determine if any environmental issues or deployment issues happen pre and post update on the side of Operations.","title":"8. Data Driven Decision-making"},{"location":"engineering/software_delivery/#9-decommission-apps-environments-and-frameworks","text":"Letting applications, frameworks and environments run when they are not needed is incredibly expensive. It is much easier to deploy new services than to know when and how we can turn off old services, or to understand if they are still needed. By creating a central software delivery and deployment mechanism we can more assuredly understand what applications may be running but could be flagged for decommisioning.","title":"9. Decommission apps, environments and frameworks"},{"location":"engineering/software_delivery/#10-continuous-delivery-to-continuous-deployment","text":"Making use of all the tools and experiences to mitigate risk, monitor quality and improve software delivery speed we eventually get to the place of Continuous Deployment. Continuous Deployment is where each change committed to version control is integrated, tested and deployed into production. Jez Humble defines Continuous Deployment as the following. When all developers are working in small batches on trunk, or everyone is working off trunk in short-lived feature branches that get merged to trunk regularly, and when trunk is always kept in a releasable state, and when we can release on demand at the push of a button during normal business hours, we are doing continuous delivery. Developers get fast feedback when they introduce any regression errors, which include defects, performance issues, security issues, usability issues, etc. When these issues are found, they are fixed immediately so that trunk is always deployable. In addition to the above, when we are deploying good builds into production on a regular basis through self-service (being deployed by Dev or by Ops)\u2014which typically means that we are deploying to production at least once per day per developer, or perhaps even automatically deploying every change a developer commits\u2014this is when we are engaging in continuous deployment.","title":"10. Continuous Delivery to Continuous Deployment"},{"location":"websites_i_manage/austin_open_mic_poetry/","text":"For many years I've been part of the Austin Poetry Community. It's been a while since there was a central hub for where people can go to share their poetry. Check it out, https://austinopenmicpoetry.com","title":"Austin Open Mic Poetry"},{"location":"websites_i_manage/my_friend_doug/","text":"One of my favorite people out there is Doug Snyder. I created this site to promote his art and music teaching. myfrienddoug.com","title":"My Friend Doug"}]}