{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Home Software Delivery The thing that excites me most in my work is figuring out how to build and maintain better systems to delivery software updates. Below is a Quote from the DevOps Handbook from a Case Study Highlighting the importance of understanding the changes that we make. In 2004, Gene Kim, Kevin Behr and George Spafford note that high-performing organizations recognize that 80% of all outages are caused by change and 80% of MTTR is spent trying to determine what changed. 1. Automation at Scale Automation at Scale means when we know a fix is available, we are primarily focused on delivering that fix to All Customers and Environments. Applying a specific minor update to an individual customer in an Adhoc way is also valuable, and there is a place for transformational Self Service however the Ultimate focus for every organization is Automation at Scale. Embracing Automation means that we will seek to eliminate as much Toil (manual work that is repeatable) to focus energy more closely on automation. 2. Standardization across Applications Standardization whether in the form of Naming Conventions, configuration, workflows, technologies or frameworks is important. Requiring standards like only allowing certain naming conventions in Production services or even lower environments means you won't have automation break and there won't be special snowflakes to handle manually via toil. Without consolidation of frameworks you end up supporting 3 different types of drivers, OS's, or frameworks. Applying a very rigid standard across all elements of customers allows anomaly detection and the ability to understand immediately if a service belongs or not. Most companies pay for services to be running because they don't know if they can turn it off or if they know they can turn it off they just don't know how to because of technical debt. Standardization across Applications allows for Automation at Scale. 3. Continuous Feedback Loop In the DevOps Handbook The Second Way describes the principles of creating fast and continuous feedback loops from Operations to Development. By doing this, we shorten and amplify feedback loops so that we can see problems as they occur and radiate this information to everyone in the value stream. This allows us to quickly find and fix problems earlier in the software development life cycle, ideally long before they cause a catastrophic failure. 4. Error Budgets Not all services are equally performant, some have a much older code base which is more large and complicated while others might be more green field and have fewer dependencies. Services should be evaluated based on the number of issues that occur throughout the lifecycle of their release, customer impact (outages/degradation of service) is one of the most valuable measures to determining impact. By better understanding the risk and challenges with each service delivered (and by breaking down Monolithic apps into Microservices) we can provide better Gating as to which services will be released and which ones will require more work. Error budgets are also a great way determine if Engineering should have a clear runway for new features or if code quality requires more robust testing. 5. Test in a Lower Environment First This one almost seems too obvious to be in the list, however one might be surprised how many Production services get deployed and run for customers without a lower environment first. Always include lower environment testing and deployment prior to delivering (or even troubleshooting) in Production first. 6. Errors should be captured and improved Every error is important. Often in software engineering a benign error will go overlooked and continuously be logged or returning a non 200 HTTP response. Even if the error is \"Known\" or could be classified as non-impactful (red herring in troubleshooting), that error still takes up space in the minds of engineers, in the logs/metrics/traces and ultimately makes an application less observable. 7. Break up deployments to enable faster delivery By breaking up deployments into small batches to deliver updates more quickly and regularly we can reduce risk of big issues showing up across multitudes of customers, correcting issues as they are found in the wild. Feature Flags are a valuable way to deliver more modular updates of components in which we can deliver deliberate updates of increasing surface area to customers as we gain confidence in the updates before the entirety is delivered. 8. Data Driven Decision making Embracing telemetry to build Observability into our updates help us understand the changes we are introducing into Production. We can test the code that is being cut by Development pre and post update for Quality and provide that data upstream. We can also test our deployment pipeline to determine if any environmental issues or deployment issues happen pre and post update on the side of Operations. 9. Decommission apps, environments and frameworks Letting applications, frameworks and environments run when they are not needed is incredibly expensive. It is much easier to deploy new services than to know when and how we can turn off old services, or to understand if they are still needed. By creating a central software delivery and deployment mechanism we can more assuredly understand what applications may be running but could be flagged for decommisioning. 10. Continuous Delivery to Continuous Deployment Making use of all the tools and experiences to mitigate risk, monitor quality and improve software delivery speed we eventually get to the place of Continuous Deployment. Continuous Deployment is where each change committed to version control is integrated, tested and deployed into production. Jez Humble defines Continuous Deployment as the following. When all developers are working in small batches on trunk, or everyone is working off trunk in short-lived feature branches that get merged to trunk regularly, and when trunk is always kept in a releasable state, and when we can release on demand at the push of a button during normal business hours, we are doing continuous delivery. Developers get fast feedback when they introduce any regression errors, which include defects, performance issues, security issues, usability issues, etc. When these issues are found, they are fixed immediately so that trunk is always deployable. In addition to the above, when we are deploying good builds into production on a regular basis through self-service (being deployed by Dev or by Ops)\u2014which typically means that we are deploying to production at least once per day per developer, or perhaps even automatically deploying every change a developer commits\u2014this is when we are engaging in continuous deployment. Skydiving Jumping out of planes might seem insane the feelings of fear change and re-arrange perspective is my favorite part of the brain teaching ourselves to be even more highly trained My excitement is one of my favorite qualities Equanimity, Stoicism and a capricious wisdom Engineering paths to freedom and graphs of the larger lump sum my favorite ones are most simple in principle It took time to learn to stand tall even more time to embrace the fall visualizing the drop while taking cold showers a lot now cold showers are how I cool off in the Texas hot Heather is my favorite person My rock when I need solid advice My love and delight The best version of everything I like Went for a run to Barton Springs saw James on his 60th with family relaxing in a few hours got together with Heather and all three of us jumped out the flying bus With Love you have to trust There will always be a way give more than you take away for it is the way About me Howdy! You found me on the internet :), this is my personal website to share with the rest of the digital world. I am a first generation Persian (Iranian) American who grew up in Austin, Texas. My day job is working in Fintech as a Senior Site Reliability Engineer at Q2. I am a big fan of the following. Hiking up Mountains Spending time with my gf and our Fluffy Rotti named Nacho (pictures coming soon, stay tuned) Meditation/Sauna/Cold Plunges/Yoga/Lifting Weights/Running/Float Tanks Learning in public Poetry, Rapping, Freestyling I am looking forward to more updates to come. You can reach me via email here at bijan@bijanrahnamai.com You can find my Github here at https://github.com/BijanJohn You can find my LinkedIn here at https://www.linkedin.com/in/bijan-rahnamai-a581b28a/ You can find my Instagram here https://www.instagram.com/bee_szan/","title":"Home"},{"location":"#welcome-home","text":"","title":"Welcome Home"},{"location":"#software-delivery","text":"The thing that excites me most in my work is figuring out how to build and maintain better systems to delivery software updates. Below is a Quote from the DevOps Handbook from a Case Study Highlighting the importance of understanding the changes that we make. In 2004, Gene Kim, Kevin Behr and George Spafford note that high-performing organizations recognize that 80% of all outages are caused by change and 80% of MTTR is spent trying to determine what changed.","title":"Software Delivery"},{"location":"#1-automation-at-scale","text":"Automation at Scale means when we know a fix is available, we are primarily focused on delivering that fix to All Customers and Environments. Applying a specific minor update to an individual customer in an Adhoc way is also valuable, and there is a place for transformational Self Service however the Ultimate focus for every organization is Automation at Scale. Embracing Automation means that we will seek to eliminate as much Toil (manual work that is repeatable) to focus energy more closely on automation.","title":"1. Automation at Scale"},{"location":"#2-standardization-across-applications","text":"Standardization whether in the form of Naming Conventions, configuration, workflows, technologies or frameworks is important. Requiring standards like only allowing certain naming conventions in Production services or even lower environments means you won't have automation break and there won't be special snowflakes to handle manually via toil. Without consolidation of frameworks you end up supporting 3 different types of drivers, OS's, or frameworks. Applying a very rigid standard across all elements of customers allows anomaly detection and the ability to understand immediately if a service belongs or not. Most companies pay for services to be running because they don't know if they can turn it off or if they know they can turn it off they just don't know how to because of technical debt. Standardization across Applications allows for Automation at Scale.","title":"2. Standardization across Applications"},{"location":"#3-continuous-feedback-loop","text":"In the DevOps Handbook The Second Way describes the principles of creating fast and continuous feedback loops from Operations to Development. By doing this, we shorten and amplify feedback loops so that we can see problems as they occur and radiate this information to everyone in the value stream. This allows us to quickly find and fix problems earlier in the software development life cycle, ideally long before they cause a catastrophic failure.","title":"3. Continuous Feedback Loop"},{"location":"#4-error-budgets","text":"Not all services are equally performant, some have a much older code base which is more large and complicated while others might be more green field and have fewer dependencies. Services should be evaluated based on the number of issues that occur throughout the lifecycle of their release, customer impact (outages/degradation of service) is one of the most valuable measures to determining impact. By better understanding the risk and challenges with each service delivered (and by breaking down Monolithic apps into Microservices) we can provide better Gating as to which services will be released and which ones will require more work. Error budgets are also a great way determine if Engineering should have a clear runway for new features or if code quality requires more robust testing.","title":"4. Error Budgets"},{"location":"#5-test-in-a-lower-environment-first","text":"This one almost seems too obvious to be in the list, however one might be surprised how many Production services get deployed and run for customers without a lower environment first. Always include lower environment testing and deployment prior to delivering (or even troubleshooting) in Production first.","title":"5. Test in a Lower Environment First"},{"location":"#6-errors-should-be-captured-and-improved","text":"Every error is important. Often in software engineering a benign error will go overlooked and continuously be logged or returning a non 200 HTTP response. Even if the error is \"Known\" or could be classified as non-impactful (red herring in troubleshooting), that error still takes up space in the minds of engineers, in the logs/metrics/traces and ultimately makes an application less observable.","title":"6. Errors should be captured and improved"},{"location":"#7-break-up-deployments-to-enable-faster-delivery","text":"By breaking up deployments into small batches to deliver updates more quickly and regularly we can reduce risk of big issues showing up across multitudes of customers, correcting issues as they are found in the wild. Feature Flags are a valuable way to deliver more modular updates of components in which we can deliver deliberate updates of increasing surface area to customers as we gain confidence in the updates before the entirety is delivered.","title":"7. Break up deployments to enable faster delivery"},{"location":"#8-data-driven-decision-making","text":"Embracing telemetry to build Observability into our updates help us understand the changes we are introducing into Production. We can test the code that is being cut by Development pre and post update for Quality and provide that data upstream. We can also test our deployment pipeline to determine if any environmental issues or deployment issues happen pre and post update on the side of Operations.","title":"8. Data Driven Decision making"},{"location":"#9-decommission-apps-environments-and-frameworks","text":"Letting applications, frameworks and environments run when they are not needed is incredibly expensive. It is much easier to deploy new services than to know when and how we can turn off old services, or to understand if they are still needed. By creating a central software delivery and deployment mechanism we can more assuredly understand what applications may be running but could be flagged for decommisioning.","title":"9. Decommission apps, environments and frameworks"},{"location":"#10-continuous-delivery-to-continuous-deployment","text":"Making use of all the tools and experiences to mitigate risk, monitor quality and improve software delivery speed we eventually get to the place of Continuous Deployment. Continuous Deployment is where each change committed to version control is integrated, tested and deployed into production. Jez Humble defines Continuous Deployment as the following. When all developers are working in small batches on trunk, or everyone is working off trunk in short-lived feature branches that get merged to trunk regularly, and when trunk is always kept in a releasable state, and when we can release on demand at the push of a button during normal business hours, we are doing continuous delivery. Developers get fast feedback when they introduce any regression errors, which include defects, performance issues, security issues, usability issues, etc. When these issues are found, they are fixed immediately so that trunk is always deployable. In addition to the above, when we are deploying good builds into production on a regular basis through self-service (being deployed by Dev or by Ops)\u2014which typically means that we are deploying to production at least once per day per developer, or perhaps even automatically deploying every change a developer commits\u2014this is when we are engaging in continuous deployment.","title":"10. Continuous Delivery to Continuous Deployment"},{"location":"#skydiving","text":"Jumping out of planes might seem insane the feelings of fear change and re-arrange perspective is my favorite part of the brain teaching ourselves to be even more highly trained My excitement is one of my favorite qualities Equanimity, Stoicism and a capricious wisdom Engineering paths to freedom and graphs of the larger lump sum my favorite ones are most simple in principle It took time to learn to stand tall even more time to embrace the fall visualizing the drop while taking cold showers a lot now cold showers are how I cool off in the Texas hot Heather is my favorite person My rock when I need solid advice My love and delight The best version of everything I like Went for a run to Barton Springs saw James on his 60th with family relaxing in a few hours got together with Heather and all three of us jumped out the flying bus With Love you have to trust There will always be a way give more than you take away for it is the way","title":"Skydiving"},{"location":"#about-me","text":"Howdy! You found me on the internet :), this is my personal website to share with the rest of the digital world. I am a first generation Persian (Iranian) American who grew up in Austin, Texas. My day job is working in Fintech as a Senior Site Reliability Engineer at Q2. I am a big fan of the following. Hiking up Mountains Spending time with my gf and our Fluffy Rotti named Nacho (pictures coming soon, stay tuned) Meditation/Sauna/Cold Plunges/Yoga/Lifting Weights/Running/Float Tanks Learning in public Poetry, Rapping, Freestyling I am looking forward to more updates to come. You can reach me via email here at bijan@bijanrahnamai.com You can find my Github here at https://github.com/BijanJohn You can find my LinkedIn here at https://www.linkedin.com/in/bijan-rahnamai-a581b28a/ You can find my Instagram here https://www.instagram.com/bee_szan/","title":"About me"},{"location":"blog/2022-07-15-National-Parks/","text":"America the Beautiful In 2019 I took a trip to Utah to see the Mighty Five, 5 amazing National Parks in Utah and it opened my eyes to see more of the most beautiful places in America. I couldn't believe how incredible these public lands are in our backyard. The National Parks are now some of my favorite trips and places to visit, they recharge my soul and inspire me see the history and wonder of our most sacred grounds. This is where I hope to add pictures, stories, suggestions on trails and experiences from the past that could help someone else see this beauty. This past summer in 2022 I visited Montana for the first time and fell in love with the city of Missoula, The mountains of Glacier and Flat Head Lake. More to come from the Trip to Missoula. Utah Arches National Park Canyonlands National Park Bryce National Park Capitol Reef National Park Zion National Park Texas Big Bend National Park Guadalupe National Park New Mexico Carlsbad Caverns Colorado Red Rocks Montana Glacier National Park Hawaii Haliakula National Park","title":"America's National Parks"},{"location":"blog/2022-07-15-National-Parks/#america-the-beautiful","text":"In 2019 I took a trip to Utah to see the Mighty Five, 5 amazing National Parks in Utah and it opened my eyes to see more of the most beautiful places in America. I couldn't believe how incredible these public lands are in our backyard. The National Parks are now some of my favorite trips and places to visit, they recharge my soul and inspire me see the history and wonder of our most sacred grounds. This is where I hope to add pictures, stories, suggestions on trails and experiences from the past that could help someone else see this beauty. This past summer in 2022 I visited Montana for the first time and fell in love with the city of Missoula, The mountains of Glacier and Flat Head Lake. More to come from the Trip to Missoula.","title":"America the Beautiful"},{"location":"blog/2022-07-15-National-Parks/#utah","text":"","title":"Utah"},{"location":"blog/2022-07-15-National-Parks/#arches-national-park","text":"","title":"Arches National Park"},{"location":"blog/2022-07-15-National-Parks/#canyonlands-national-park","text":"","title":"Canyonlands National Park"},{"location":"blog/2022-07-15-National-Parks/#bryce-national-park","text":"","title":"Bryce National Park"},{"location":"blog/2022-07-15-National-Parks/#capitol-reef-national-park","text":"","title":"Capitol Reef National Park"},{"location":"blog/2022-07-15-National-Parks/#zion-national-park","text":"","title":"Zion National Park"},{"location":"blog/2022-07-15-National-Parks/#texas","text":"","title":"Texas"},{"location":"blog/2022-07-15-National-Parks/#big-bend-national-park","text":"","title":"Big Bend National Park"},{"location":"blog/2022-07-15-National-Parks/#guadalupe-national-park","text":"","title":"Guadalupe National Park"},{"location":"blog/2022-07-15-National-Parks/#new-mexico","text":"","title":"New Mexico"},{"location":"blog/2022-07-15-National-Parks/#carlsbad-caverns","text":"","title":"Carlsbad Caverns"},{"location":"blog/2022-07-15-National-Parks/#colorado","text":"","title":"Colorado"},{"location":"blog/2022-07-15-National-Parks/#red-rocks","text":"","title":"Red Rocks"},{"location":"blog/2022-07-15-National-Parks/#montana","text":"","title":"Montana"},{"location":"blog/2022-07-15-National-Parks/#glacier-national-park","text":"","title":"Glacier National Park"},{"location":"blog/2022-07-15-National-Parks/#hawaii","text":"","title":"Hawaii"},{"location":"blog/2022-07-15-National-Parks/#haliakula-national-park","text":"","title":"Haliakula National Park"},{"location":"engineering/certifications/","text":"Certifications Credly certification profile RHCSA I got my RHCSA back in 2019 for the Red Hat Enterprise Linux 7 exam. This was one of the most challenging and fun certifications I have ever attempted, took me a few times to pass. It is a hands-on exam that really expects an administrator to have hands on keyboard skills to perform needed maintenance and troubleshooting of Centos. It was in this certification that I fell in love with Linux and have only been happier since. AWS Cloud Practitioner This was my first cloud certification in 2019, and it was a good intro into the Cloud Computing model, why it is important and a general survey of AWS services. RHCSAA I got my Ansible certification towards the end of 2019 for Ansible version 2.7. This was definitely the most difficult (and fun!) certification I have ever had the pleasure of working on, also took me a few times to pass. It exposed me to a DSL (domain specific language) that gave me the skills to write automation and reduce toil. I used Ansible for the next few years to apply fixes at mass scale on servers to improve availability and quality in the hosting org of my company at the time. After obtaining this cert I went to Atlanta for Ansiblefest, which was my first tech conference and learned so much. Hashi Terraform Associate Hashicorp makes incredible products and my company uses their tools heavily. In 2020 I decided to get my Terraform Certification . IaC (Infrastructure as Code) is one of the most important principles of Dev Ops that I have learned and practiced. Using technology like this allows for immutable infrastructure, configuration as code, environments without config drift and automation at scale. Hashi Vault Associate When you run distributed systems you are going to need a secure and reliable secrets store and that is what Vault provides. At the end of 2020 I got my Vault Certification and was enlightened as to how flexible and robust the Vault tool is. There are many secrets engines with Vault for many use cases, after taking this cert you definitely learn and understand how it can be used. Hashi Consul Associate In 2021, I got the Consul Certification and completed the 3 associate level certs that Hashi offered at the time. My company uses Consul heavily for Service Discovery (and DNS) and it is a crucial piece to how we evaluate service health in our distributed clusters. I can't recommend this technology enough as it is incredibly powerful and able to help manage the complicated pieces of having a service catalog. AWS Certified Solutions Architect This is my latest certification that I have received this past year (2022). The Solutions Architect cert wasn't too challenging, but it was enlightening to see how expansive the AWS catalogue is as well as how sophisticated they build their products.","title":"Certifications"},{"location":"engineering/certifications/#certifications","text":"Credly certification profile","title":"Certifications"},{"location":"engineering/certifications/#rhcsa","text":"I got my RHCSA back in 2019 for the Red Hat Enterprise Linux 7 exam. This was one of the most challenging and fun certifications I have ever attempted, took me a few times to pass. It is a hands-on exam that really expects an administrator to have hands on keyboard skills to perform needed maintenance and troubleshooting of Centos. It was in this certification that I fell in love with Linux and have only been happier since.","title":"RHCSA"},{"location":"engineering/certifications/#aws-cloud-practitioner","text":"This was my first cloud certification in 2019, and it was a good intro into the Cloud Computing model, why it is important and a general survey of AWS services.","title":"AWS Cloud Practitioner"},{"location":"engineering/certifications/#rhcsaa","text":"I got my Ansible certification towards the end of 2019 for Ansible version 2.7. This was definitely the most difficult (and fun!) certification I have ever had the pleasure of working on, also took me a few times to pass. It exposed me to a DSL (domain specific language) that gave me the skills to write automation and reduce toil. I used Ansible for the next few years to apply fixes at mass scale on servers to improve availability and quality in the hosting org of my company at the time. After obtaining this cert I went to Atlanta for Ansiblefest, which was my first tech conference and learned so much.","title":"RHCSAA"},{"location":"engineering/certifications/#hashi-terraform-associate","text":"Hashicorp makes incredible products and my company uses their tools heavily. In 2020 I decided to get my Terraform Certification . IaC (Infrastructure as Code) is one of the most important principles of Dev Ops that I have learned and practiced. Using technology like this allows for immutable infrastructure, configuration as code, environments without config drift and automation at scale.","title":"Hashi Terraform Associate"},{"location":"engineering/certifications/#hashi-vault-associate","text":"When you run distributed systems you are going to need a secure and reliable secrets store and that is what Vault provides. At the end of 2020 I got my Vault Certification and was enlightened as to how flexible and robust the Vault tool is. There are many secrets engines with Vault for many use cases, after taking this cert you definitely learn and understand how it can be used.","title":"Hashi Vault Associate"},{"location":"engineering/certifications/#hashi-consul-associate","text":"In 2021, I got the Consul Certification and completed the 3 associate level certs that Hashi offered at the time. My company uses Consul heavily for Service Discovery (and DNS) and it is a crucial piece to how we evaluate service health in our distributed clusters. I can't recommend this technology enough as it is incredibly powerful and able to help manage the complicated pieces of having a service catalog.","title":"Hashi Consul Associate"},{"location":"engineering/certifications/#aws-certified-solutions-architect","text":"This is my latest certification that I have received this past year (2022). The Solutions Architect cert wasn't too challenging, but it was enlightening to see how expansive the AWS catalogue is as well as how sophisticated they build their products.","title":"AWS Certified Solutions Architect"}]}